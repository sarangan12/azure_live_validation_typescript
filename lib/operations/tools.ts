/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/toolsMappers";
import { LiveValidationServiceClientContext } from "../liveValidationServiceClientContext";

/** Class representing a Tools. */
export class Tools {
  private readonly client: LiveValidationServiceClientContext;

  /**
   * Create a Tools.
   * @param {LiveValidationServiceClientContext} client Reference to the service client.
   */
  constructor(client: LiveValidationServiceClientContext) {
    this.client = client;
  }

  /**
   * Process non-prod canary environment ARM calls.
   * @param liveValidationParameter Live Validation Parameter
   * @param [options] The optional parameters
   * @returns Promise<Models.ToolsLiveValidationValidateResponse>
   */
  liveValidationValidate(liveValidationParameter: Models.LiveValidationParameter, options?: msRest.RequestOptionsBase): Promise<Models.ToolsLiveValidationValidateResponse>;
  /**
   * @param liveValidationParameter Live Validation Parameter
   * @param callback The callback
   */
  liveValidationValidate(liveValidationParameter: Models.LiveValidationParameter, callback: msRest.ServiceCallback<Models.LiveValidationResponse>): void;
  /**
   * @param liveValidationParameter Live Validation Parameter
   * @param options The optional parameters
   * @param callback The callback
   */
  liveValidationValidate(liveValidationParameter: Models.LiveValidationParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LiveValidationResponse>): void;
  liveValidationValidate(liveValidationParameter: Models.LiveValidationParameter, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LiveValidationResponse>): Promise<Models.ToolsLiveValidationValidateResponse> {
    return this.client.sendOperationRequest(
      {
        liveValidationParameter,
        options
      },
      liveValidationValidateOperationSpec,
      callback) as Promise<Models.ToolsLiveValidationValidateResponse>;
  }

  /**
   * Process Prod environment ARM calls.
   * @param liveValidationParameter Live Validation Parameter
   * @param [options] The optional parameters
   * @returns Promise<Models.ToolsLiveValidationProdValidateResponse>
   */
  liveValidationProdValidate(liveValidationParameter: Models.LiveValidationParameter, options?: msRest.RequestOptionsBase): Promise<Models.ToolsLiveValidationProdValidateResponse>;
  /**
   * @param liveValidationParameter Live Validation Parameter
   * @param callback The callback
   */
  liveValidationProdValidate(liveValidationParameter: Models.LiveValidationParameter, callback: msRest.ServiceCallback<Models.LiveValidationResponse>): void;
  /**
   * @param liveValidationParameter Live Validation Parameter
   * @param options The optional parameters
   * @param callback The callback
   */
  liveValidationProdValidate(liveValidationParameter: Models.LiveValidationParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LiveValidationResponse>): void;
  liveValidationProdValidate(liveValidationParameter: Models.LiveValidationParameter, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LiveValidationResponse>): Promise<Models.ToolsLiveValidationProdValidateResponse> {
    return this.client.sendOperationRequest(
      {
        liveValidationParameter,
        options
      },
      liveValidationProdValidateOperationSpec,
      callback) as Promise<Models.ToolsLiveValidationProdValidateResponse>;
  }

  /**
   * Get list of safe properties in non-prod canary environments.
   * @param [options] The optional parameters
   * @returns Promise<Models.ToolsLiveValidationWhiteListResponse>
   */
  liveValidationWhiteList(options?: msRest.RequestOptionsBase): Promise<Models.ToolsLiveValidationWhiteListResponse>;
  /**
   * @param callback The callback
   */
  liveValidationWhiteList(callback: msRest.ServiceCallback<Models.LiveValidationWhiteListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  liveValidationWhiteList(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LiveValidationWhiteListResponse>): void;
  liveValidationWhiteList(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LiveValidationWhiteListResponse>): Promise<Models.ToolsLiveValidationWhiteListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      liveValidationWhiteListOperationSpec,
      callback) as Promise<Models.ToolsLiveValidationWhiteListResponse>;
  }

  /**
   * Get list of safe properties is prod environments.
   * @param [options] The optional parameters
   * @returns Promise<Models.ToolsLiveValidationProdWhiteListResponse>
   */
  liveValidationProdWhiteList(options?: msRest.RequestOptionsBase): Promise<Models.ToolsLiveValidationProdWhiteListResponse>;
  /**
   * @param callback The callback
   */
  liveValidationProdWhiteList(callback: msRest.ServiceCallback<Models.LiveValidationWhiteListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  liveValidationProdWhiteList(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LiveValidationWhiteListResponse>): void;
  liveValidationProdWhiteList(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LiveValidationWhiteListResponse>): Promise<Models.ToolsLiveValidationProdWhiteListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      liveValidationProdWhiteListOperationSpec,
      callback) as Promise<Models.ToolsLiveValidationProdWhiteListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const liveValidationValidateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/validate",
  requestBody: {
    parameterPath: "liveValidationParameter",
    mapper: {
      ...Mappers.LiveValidationParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LiveValidationResponse
    },
    default: {}
  },
  serializer
};

const liveValidationProdValidateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/prod/validate",
  requestBody: {
    parameterPath: "liveValidationParameter",
    mapper: {
      ...Mappers.LiveValidationParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LiveValidationResponse
    },
    default: {}
  },
  serializer
};

const liveValidationWhiteListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/whitelist",
  responses: {
    200: {
      bodyMapper: Mappers.LiveValidationWhiteListResponse
    },
    default: {}
  },
  serializer
};

const liveValidationProdWhiteListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/prod/whitelist",
  responses: {
    200: {
      bodyMapper: Mappers.LiveValidationWhiteListResponse
    },
    default: {}
  },
  serializer
};
